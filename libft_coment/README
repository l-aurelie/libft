======================MEMSET
#include <string.h>
     void *
     memset(void *b, int c, size_t n);

DESCRIPTION
     The memset() function writes n bytes of value c (converted to an unsigned
     char) to the string s.

RETURN VALUES
     The memset() function returns its first argument.

========================BZERO
#include <strings.h>

     void
     bzero(void *s, size_t n);

DESCRIPTION
     The bzero() function writes n zeroed bytes to the string s.  If n is
     zero, bzero() does nothing.

========================MEMCPY
     #include <string.h>

     void *
     memcpy(void *restrict s1, const void *restrict s2, size_t n);

DESCRIPTION
     The memcpy() function copies n bytes from memory area s2 to memory area
     s1.  If s1 and s2 overlap, behavior is undefined.  Applications in which
     s1 and s2 might overlap should use memmove(3) instead.

RETURN VALUES
     The memcpy() function returns the original value of s1.
========================MEMCCPY
#include <string.h>
     void *
     memccpy(void *restrict s1, const void *restrict s2, int c, size_t n);

DESCRIPTION
     The memccpy() function copies bytes from string s2 to string s1.  If the
     character c (as converted to an unsigned char) occurs in the string s2,
     the copy stops and a pointer to the byte after the copy of c in the
     string s1 is returned.  Otherwise, n bytes are copied, and a NULL pointer
     is returned.
========================MEMMOVE
#include <string.h>

     void *
     memmove(void *s1, const void *s2, size_t n);

DESCRIPTION
     The memmove() function copies n bytes from string s2 to string s1.  The
     two strings may overlap; the copy is always done in a non-destructive
     manner.

RETURN VALUES
     The memmove() function returns the original value of s1.
========================MEMCHR
   #include <string.h>

     void *
     memchr(const void *s, int c, size_t n);

DESCRIPTION
     The memchr() function locates the first occurrence of c (converted to an
     unsigned char) in string s.

RETURN VALUES
     The memchr() function returns a pointer to the byte located, or NULL if
     no such byte exists within n bytes.
========================MEMCMP
#include <string.h>

     int
     memcmp(const void *s1, const void *s2, size_t n);

DESCRIPTION
     The memcmp() function compares byte string s1 against byte string s2.
     Both strings are assumed to be n bytes long.

RETURN VALUES
     The memcmp() function returns zero if the two strings are identical, oth-erwise otherwise
     erwise returns the difference between the first two differing bytes
     (treated as unsigned char values, so that `\200' is greater than `\0',
     for example).  Zero-length strings are always identical.
========================STRLEN
#include <string.h>

     size_t
     strlen(const char *s);

DESCRIPTION
     The strlen() function computes the length of the string s.

RETURN VALUES
     The strlen() function returns the number of characters that precede the
     terminating NUL character.
========================ISQQCH
Ces fonctions vérifient si le caractère c, qui doit avoir la valeur d'un unsigned char ou valoir EOF, rentre dans une catégorie donnée, en accord avec la localisation en cours.

isalnum()
    vérifie si l'on a un caractère alphanumérique. C'est équivalent à (isalpha(c) || isdigit(c)). 
isalpha()
    vérifie si l'on a un caractère alphabétique. Dans la localisation "C" standard, c'est équivalent à (isupper(c) || islower(c)). Dans certaines localisations, il peut y avoir des caractères supplémentaires pour lesquels isalpha() est vrai, c'est-à-dire pour des lettres qui ne sont ni majuscules ni minuscules. 
isascii()
    vérifie si c est un unsigned char sur 7 bits, entrant dans le jeu de caractères ASCII. 
isdigit()
    vérifie si l'on a un chiffre (0 à 9). 
islower()
    vérifie si l'on a un caractère minuscule. 
isprint()
    vérifie s'il s'agit d'un caractère imprimable, y compris l'espace. 
isupper()
    vérifie si l'on a une lettre majuscule. 
VALEUR RENVOYÉE
Les valeurs renvoyées sont non nulles si le caractère c entre dans la catégorie testée, et zéro sinon 
========================TOQQCH
#include <ctype.h>

int toupper(int c);
int tolower(int c);

DESCRIPTION
toupper() convertit la lettre c en majuscule si c'est possible.
tolower() convertit la lettre c en minuscule si c'est possible.

Si c n'est ni une valeur unsigned char, ni EOF, le comportement de ces fonctions est imprévisible.  
VALEUR RENVOYÉE
La valeur renvoyée est celle de la lettre convertie, ou bien c si la conversion n'était pas possible.  
========================STRCHR
     #include <string.h>
     char *
     strchr(const char *s, int c);
     char *
     strrchr(const char *s, int c);

DESCRIPTION
     The strchr() function locates the first occurrence of c (converted to a
     char) in the string pointed to by s.  The terminating null character is
     considered to be part of the string; therefore if c is `\0', the func-tions functions
     tions locate the terminating `\0'.

     The strrchr() function is identical to strchr(), except it locates the
     last occurrence of c.

RETURN VALUES
     The functions strchr() and strrchr() return a pointer to the located
     character, or NULL if the character does not appear in the string.
=========================STRCMP
 #include <string.h>

     int
     strcmp(const char *s1, const char *s2);
     int
     strncmp(const char *s1, const char *s2, size_t n);

DESCRIPTION
     The strcmp() and strncmp() functions lexicographically compare the null-terminated nullterminated
     terminated strings s1 and s2.

     The strncmp() function compares not more than n characters.  Because
     strncmp() is designed for comparing strings rather than binary data,
     characters that appear after a `\0' character are not compared.

RETURN VALUES
     The strcmp() and strncmp() return an integer greater than, equal to, or
     less than 0, according as the string s1 is greater than, equal to, or
     less than the string s2.  The comparison is done using unsigned charac-ters, characters,
     ters, so that `\200' is greater than `\0'.
=========================STRLCPY/CAT
     #include <string.h>

     size_t
     strlcpy(char *dst, const char *src, size_t size);

     size_t
     strlcat(char *dst, const char *src, size_t size);

DESCRIPTION
     The strlcpy() and strlcat() functions copy and concatenate strings
     respectively.  They are designed to be safer, more consistent, and less
     error prone replacements for strncpy(3) and strncat(3).  Unlike those
     functions, strlcpy() and strlcat() take the full size of the buffer (not
     just the length) and guarantee to NUL-terminate the result (as long as
     size is larger than 0 or, in the case of strlcat(), as long as there is
     at least one byte free in dst).  Note that you should include a byte for
     the NUL in size.  Also note that strlcpy() and strlcat() only operate on
     true ``C'' strings.  This means that for strlcpy() src must be NUL-termi-nated NUL-terminated
     nated and for strlcat() both src and dst must be NUL-terminated.

     The strlcpy() function copies up to size - 1 characters from the NUL-ter-minated NUL-terminated
     minated string src to dst, NUL-terminating the result.

     The strlcat() function appends the NUL-terminated string src to the end
     of dst.  It will append at most size - strlen(dst) - 1 bytes, NUL-termi-nating NUL-terminating
     nating the result.

RETURN VALUES
     The strlcpy() and strlcat() functions return the total length of the
     string they tried to create.  For strlcpy() that means the length of src.
     For strlcat() that means the initial length of dst plus the length of
     src.  While this may seem somewhat confusing it was done to make trunca-tion truncation
     tion detection simple.

     Note however, that if strlcat() traverses size characters without finding
     a NUL, the length of the string is considered to be size and the destina-tion destination
     tion string will not be NUL-terminated (since there was no space for the
     NUL).  This keeps strlcat() from running off the end of a string.  In
     practice this should not happen (as it means that either size is incorrect
     or that dst is not a proper ``C'' string).  The check exists to pre-vent prevent
     vent potential security problems in incorrect code.

=========================STRNSTR
SYNOPSIS
     #include <string.h>
     char *
     strnstr(const char *s1, const char *s2, size_t n);

DESCRIPTION
     The strstr() function locates the first occurrence of the null-terminated
     string s2 in the null-terminated string s1.

     The strnstr() function locates the first occurrence of the null-terminated
     string s2 in the string s1, where not more than n characters are
     searched.  Characters that appear after a `\0' character are not
     searched
    
RETURN VALUES
     If s2 is an empty string, s1 is returned; if s2 occurs nowhere in s1,
     NULL is returned; otherwise a pointer to the first character of the first
     occurrence of s2 is returned.

=========================ATOI
#include <stdlib.h>

     int
     atoi(const char *str);

DESCRIPTION
     The atoi() function converts the initial portion of the string pointed to
     by str to int representation.

IMPLEMENTATION NOTES
     The atoi() function is not thread-safe and also not async-cancel safe.
==========================CALLOC
 #include <stdlib.h>
     void *
     calloc(size_t count, size_t size);

DESCRIPTION
     The calloc() function contiguously allocates enough space for count
     objects that are size bytes of memory each and returns a pointer to the
     allocated memory.  The allocated memory is filled with bytes of value
     zero.

RETURN VALUES
     If successful, calloc(), malloc(), realloc(), reallocf(), and valloc()
     functions return a pointer to allocated memory.  If there is an error,
     they return a NULL pointer and set errno to ENOMEM.
===========================STRDUP
#include <string.h>
     char *
     strdup(const char *s1);

DESCRIPTION
     The strdup() function allocates sufficient memory for a copy of the
     string s1, does the copy, and returns a pointer to it.  The pointer may
     subsequently be used as an argument to the function free(3).

=========================
Function name	ft_substr
Prototypechar *ft_substr(char const *s, unsigned int start,size_t len);
Paramètres	#1. La chaine de laquelle extraire la nouvellechaine
#2. L’index de début de la nouvelle chaine dans lachaine ’s’.
#3. La taille maximale de la nouvelle chaine.
Valeur de retour	The nouvelle chaine de caractere. NULL si l’allocation échoue.
Fonctions externes autorisées		malloc
DescriptionAlloue (avec malloc(3)) et retourne une chaine de caractères issue de la chaine ’s’.
Cette nouvelle chaine commence à l’index ’start’ et a pour taille maximale ’len’
===========================
Function name	ft_strjoin
Prototypechar *ft_strjoin(char const *s1, char const *s2);
Paramètres	#1. La chaine de caractères préfixe.
#2. La chaine de caractères suffixe.
Valeur de retour	La nouvelle chaine de caractères. NULL sil’allocation échoue.
Fonctions externes autorisées		malloc
Description		Alloue (avec malloc(3)) et retourne une nouvelle chaine, résultat
 de la concaténation de s1 et s2
==========================
Function name	ft_strtrim
Prototype	char *ft_strtrim(char const *s1, char const *set);
Paramètres	#1. La chaine de caractères à trimmer.
#2. Le set de reference de caractères à trimmer.
Valeur de retour	La chaine de caractères trimmée. NULL si l’allocation échoue.
Fonctions externes autorisées		malloc
Description	Alloue (avec malloc(3)) et retourne une copie dela chaine ’s1’, sans les 
caractères spécifiés dans ’set’ au début et à la fin de la chaine de caractères.
=========================
Function name	ft_split
Prototype	char **ft_split(char const *s, char c);
Fichiers de rendu-Paramètres
#1. La chaine de caractères à découper.
#2. Le caractère délimitant.
Valeur de retour	Le tableau de nouvelles chaines de caractères,résultant du découpage. 
NULL si l’allocation échoue.
Fonctions externes autorisées	malloc, free
Description	Alloue (avec malloc(3)) et retourne un tableau	de chaines de caracteres obtenu
 en séparant ’s’ à l’aide du caractère ’c’, utilisé comme délimiteur. Le tableau doit être terminé 
par NULL.
=========================
Function name	ft_itoa
Prototype	char *ft_itoa(int n);
Fichiers de rendu-Paramètres
#1. l’integer à convertir.
Valeur de retour	La chaine de caractères représentant l’integer. NULL si l’allocation échoue.
Fonctionsex-ternes autorisées	malloc
Description	Alloue (avec malloc(3)) et retourne une chaine de caractères représentant l’integer 
reçu en argument. Les nombres négatifs doivent être gérés.
=========================
Function name	ft_strmapi
Prototype	char *ft_strmapi(char const *s, char (*f)(unsignedint, char));
Paramètres	#1. La chaine de caractères sur laquelle itérer
#2. La fonction à appliquer à chaque caractère.
Valeur de retour	La chaine de caractères résultant des applications successives de f. Retourne 
NULL si l’allocation échoue.
Fonctions externes autorisées		malloc
Description	Applique la fonction ’f’ à chaque caractère de la chaine de caractères passée en 
argument pour créer une nouvelle chaine de caractères (avec malloc(3))résultant des applications 
successives de ’f’.
=========================
Function name	ft_putchar_fd
Prototype	void ft_putchar_fd(char c, int fd);
Fichiers de rendu-Paramètres	#1. Le caractère à écrire.
#2. Le file descriptor sur lequel écrire.
Valeur de retour	None
Fonctionsex-ternes autorisées	write
Description	Écrit le caractère ’c’ sur le file descriptordonné.
Function name	ft_putstr_fd
Prototype	void ft_putstr_fd(char *s, int fd);
Paramètres #1. La chaine de caractères à écrire.
#2. Le file descriptor sur lequel écrire.
Valeur de retour	None
Fonctionsex-ternes autorisées	write
Description	Écrit la chaine de caractères ’s’ sur le filedescriptor donné.
===========================
Function name	ft_putendl_fd
Prototype	void ft_putendl_fd(char *s, int fd);
Fichiers de rendu-Paramètres	#1. La chaine de caractères à écrire.
#2. Le file descriptor sur lequel écrire.
Valeur de retour	None
Fonctionsex-ternes autorisées	write
Description	Écrit La chaine de caractères ’s’ sur le filedescriptor donné, suivie d’un
 retour à la ligne.
Function name	ft_putnbr_fd
Prototype	void ft_putnbr_fd(int n, int fd);
Fichiers de rendu-Paramètres
#1. L’integer à écrire.
#2. Le file descriptor sur lequel écrire.
Valeur de retour	None
Fonctionsex-ternes autorisées	write
Description Écrit l’integer ’n’ sur le file descriptor donné

